# ============================================================================
# Tesslate Studio - Production Configuration
# ============================================================================
# This file is configured for production with Docker Compose
# Copy this file to .env and update the values below
# ============================================================================

# ----------------------------------------------------------------------------
# Required Configuration - YOU MUST UPDATE THESE
# ----------------------------------------------------------------------------

# Backend Secret Key (Automatically generated secure key)
# To regenerate: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-secret-key-here-change-this-in-production

# ----------------------------------------------------------------------------
# Optional: LiteLLM Configuration (Required for AI features)
# ----------------------------------------------------------------------------
# LiteLLM handles all AI model requests through a proxy server
#
# Without LiteLLM, the app will still work for:
#   ✓ Code editor and file management
#   ✓ Project creation and live preview
#   ✓ Git integration and version control
#   ✓ Alternative AI providers (OpenRouter, Ollama, LM Studio)
#
# With LiteLLM, you get:
#   ✓ Built-in AI chat and code generation
#   ✓ AI agents (Stream Builder, Full Stack Agent, etc.)
#   ✓ Usage tracking and budget management per user

# Your LiteLLM proxy URL and master key
LITELLM_API_BASE=https://your-litellm-url.com/v1
LITELLM_MASTER_KEY=your-litellm-master-key-here

# LiteLLM User Configuration
LITELLM_TEAM_ID=default
LITELLM_EMAIL_DOMAIN=localhost
LITELLM_INITIAL_BUDGET=10.0

# Optional: Default models (leave commented to use LiteLLM's configured models)
# LITELLM_DEFAULT_MODELS=gpt-4o-mini,claude-3-5-sonnet

# Optional: Direct OpenAI API Base (for backwards compatibility)
# OPENAI_API_BASE=https://your-litellm-url.com/v1

# ----------------------------------------------------------------------------
# Domain and Port Configuration
# ----------------------------------------------------------------------------

# Application Domain (no protocol, just domain)
# For local development, use studio.localhost
APP_DOMAIN=studio.tesslate.com

# Application Protocol (http for local, https for production)
APP_PROTOCOL=https

# Application Ports
APP_PORT=80
APP_SECURE_PORT=443
TRAEFIK_DASHBOARD_PORT=8080
BACKEND_PORT=8000
FRONTEND_PORT=5173

# Base URL (automatically constructed from protocol and domain)
APP_BASE_URL=${APP_PROTOCOL}://${APP_DOMAIN}

# Development Server Base URL (for preview containers)
# Leave empty for docker deployment (will use APP_BASE_URL)
DEV_SERVER_BASE_URL=

# ----------------------------------------------------------------------------
# CORS and Security Configuration
# ----------------------------------------------------------------------------

# CORS Allowed Origins (automatically set from APP_BASE_URL)
CORS_ORIGINS=${APP_BASE_URL}

# Allowed Hosts (automatically set from APP_DOMAIN)
ALLOWED_HOSTS=${APP_DOMAIN}

# ----------------------------------------------------------------------------
# Database Configuration
# ----------------------------------------------------------------------------

# Docker Compose includes PostgreSQL automatically - no configuration needed!
# The orchestrator service connects to it automatically via docker-compose.yml

# Optional: For native development outside Docker, uncomment and configure:
# DATABASE_URL=postgresql+asyncpg://tesslate_user:dev_password_change_me@localhost:5432/tesslate_dev

# Optional: PostgreSQL credentials (used by docker-compose.yml)
# POSTGRES_DB=tesslate_dev
# POSTGRES_USER=tesslate_user
# POSTGRES_PASSWORD=dev_password_change_me

# ----------------------------------------------------------------------------
# Traefik Configuration
# ----------------------------------------------------------------------------
# Certificate resolver for SSL/TLS
# "letsencrypt" - HTTP challenge (single domain only)
# "cloudflare" - DNS challenge (supports wildcard *.{APP_DOMAIN})
TRAEFIK_CERT_RESOLVER=cloudflare

# Traefik Dashboard Basic Auth (admin:admin by default)
# To change password, generate with: htpasswd -nb admin your-password
# Current: admin:admin
TRAEFIK_BASIC_AUTH=admin:$$2y$$10$$EIHbchqg0sjZLr9iZINqA.6Za7wPjGAVdTER2ob5whDLtHkkZSGbC

# ----------------------------------------------------------------------------
# Deployment Configuration
# ----------------------------------------------------------------------------

# Deployment Mode (docker for local, kubernetes for K8s)
DEPLOYMENT_MODE=docker

# File watching for dev containers (required for hot reload on Windows/Mac Docker)
CHOKIDAR_USEPOLLING=true
CHOKIDAR_INTERVAL=1000
WATCHPACK_POLLING=true

# ----------------------------------------------------------------------------
# Optional: JWT Configuration
# ----------------------------------------------------------------------------
# ALGORITHM=HS256
# ACCESS_TOKEN_EXPIRE_MINUTES=30
# REFRESH_TOKEN_EXPIRE_DAYS=14

# ----------------------------------------------------------------------------
# Optional: GitHub OAuth Configuration
# ----------------------------------------------------------------------------
# To enable GitHub login and repository import:
# 1. Create OAuth App at: https://github.com/settings/applications/new
# 2. Set Authorization callback URL to: http://studio.localhost/auth/github/callback
# 3. Add your Client ID and Secret below

# GITHUB_CLIENT_ID=your_github_client_id
# GITHUB_CLIENT_SECRET=your_github_client_secret
# GITHUB_OAUTH_REDIRECT_URI=${APP_PROTOCOL}://${APP_DOMAIN}/auth/github/callback

# ----------------------------------------------------------------------------
# Optional: Production Cloudflare Configuration
# ----------------------------------------------------------------------------
# Only needed if using Cloudflare for DNS and SSL in production

# CF_DNS_API_TOKEN=your_cloudflare_dns_api_token_here

# ============================================================================
# Quick Start Instructions
# ============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Generate a SECRET_KEY: python -c "import secrets; print(secrets.token_hex(32))"
# 3. (Optional) Add your LiteLLM proxy URL and LITELLM_MASTER_KEY for AI features
# 4. Run: docker-compose up -d
# 5. Access at: http://studio.localhost
# 6. Traefik Dashboard: http://studio.localhost/traefik (admin:admin)
#
# Note: Without LiteLLM, you can still use the code editor, project management,
# and configure alternative AI providers (OpenRouter, Ollama, LM Studio, etc.)
# ============================================================================
