# Production Docker Compose for Tesslate Studio
# Domain configured via APP_DOMAIN environment variable

services:
  traefik:
    image: traefik:v3.1
    container_name: tesslate-traefik
    restart: unless-stopped
    ports:
      - "${APP_PORT:-80}:80"
      - "${APP_SECURE_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"  # Traefik dashboard (disable in production or secure it)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.prod.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/acme.json:/etc/traefik/acme.json
    networks:
      - tesslate-network
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      # Dashboard at /traefik (secure this in production with auth)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${APP_DOMAIN}`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-stripprefix,traefik-auth"
      - "traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes=/traefik"
      # Add basic auth for security in production
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-dashboard.priority=200"

  postgres:
    image: postgres:15-alpine
    container_name: tesslate-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=tesslate
      - POSTGRES_USER=tesslate_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tesslate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tesslate_user -d tesslate"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: tesslate-orchestrator
    restart: unless-stopped
    volumes:
      - ./users:/app/users
      - /var/run/docker.sock:/var/run/docker.sock
      - ./orchestrator/app:/app/app:ro
      - ./orchestrator/Dockerfile.devserver:/app/Dockerfile.devserver:ro
    environment:
      - DATABASE_URL=postgresql+asyncpg://tesslate_user:${POSTGRES_PASSWORD}@postgres:5432/tesslate
      - SECRET_KEY=${SECRET_KEY}
      - DEPLOYMENT_MODE=docker
      - LITELLM_API_BASE=${LITELLM_API_BASE}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_DEFAULT_MODELS=${LITELLM_DEFAULT_MODELS}
      - LITELLM_TEAM_ID=${LITELLM_TEAM_ID}
      - LITELLM_EMAIL_DOMAIN=${LITELLM_EMAIL_DOMAIN}
      - LITELLM_INITIAL_BUDGET=${LITELLM_INITIAL_BUDGET}
      - APP_PROTOCOL=${APP_PROTOCOL}
      - APP_DOMAIN=${APP_DOMAIN}
      - DEV_SERVER_BASE_URL=${APP_PROTOCOL}://${APP_DOMAIN}
      - CORS_ORIGINS=${APP_PROTOCOL}://${APP_DOMAIN}
      - ALLOWED_HOSTS=${APP_DOMAIN}
    networks:
      - tesslate-network
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # API routes - handle both /api and websocket paths
      - "traefik.http.routers.orchestrator.rule=Host(`${APP_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/ws`))"
      - "traefik.http.routers.orchestrator.entrypoints=web,websecure"
      - "traefik.http.routers.orchestrator.priority=100"
      - "traefik.http.routers.orchestrator.tls=true"
      - "traefik.http.routers.orchestrator.tls.certresolver=cloudflare"
      - "traefik.http.services.orchestrator.loadbalancer.server.port=8000"

  app:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    container_name: tesslate-app
    restart: unless-stopped
    environment:
      - VITE_API_URL=
    networks:
      - tesslate-network
    labels:
      - "traefik.enable=true"
      # Frontend routes - everything except /api, /ws, and /preview
      - "traefik.http.routers.app.rule=Host(`${APP_DOMAIN}`) && !PathPrefix(`/api`) && !PathPrefix(`/ws`) && !PathPrefix(`/preview`) && !PathPrefix(`/traefik`)"
      - "traefik.http.routers.app.entrypoints=web,websecure"
      - "traefik.http.routers.app.priority=10"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=cloudflare"
      - "traefik.http.routers.app.tls.domains[0].main=${APP_DOMAIN}"
      - "traefik.http.routers.app.tls.domains[0].sans=*.${APP_DOMAIN}"
      - "traefik.http.services.app.loadbalancer.server.port=80"

networks:
  tesslate-network:
    name: tesslate-network
    driver: bridge

volumes:
  postgres-data:
    name: tesslate-postgres-data
