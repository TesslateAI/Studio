apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubelet-ca-installer
  namespace: tesslate-registry
  labels:
    app: kubelet-ca-installer
spec:
  selector:
    matchLabels:
      app: kubelet-ca-installer
  template:
    metadata:
      labels:
        app: kubelet-ca-installer
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: registry-ca-installer
      containers:
      - name: ca-installer
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          apk add --no-cache util-linux
          echo "Installing registry CA certificate for kubelet..."

          # Create directory for Docker registry certificates
          mkdir -p /host/etc/docker/certs.d/docker-registry.tesslate-registry.svc.cluster.local:5000

          # Copy the CA certificate
          cp /ca/ca.crt /host/etc/docker/certs.d/docker-registry.tesslate-registry.svc.cluster.local:5000/ca.crt

          # Also copy for localhost access
          mkdir -p /host/etc/docker/certs.d/localhost:30500
          cp /ca/ca.crt /host/etc/docker/certs.d/localhost:30500/ca.crt

          # Copy to system CA store
          if [ -d "/host/usr/local/share/ca-certificates" ]; then
            cp /ca/ca.crt /host/usr/local/share/ca-certificates/registry.crt
            chroot /host update-ca-certificates || true
          fi

          # Copy to containerd certificate directory
          mkdir -p /host/etc/containerd/certs.d/10.108.85.231:5000
          cat > /host/etc/containerd/certs.d/10.108.85.231:5000/hosts.toml << 'EOFHOSTS'
          server = "https://10.108.85.231:5000"
          [host."https://10.108.85.231:5000"]
            capabilities = ["pull", "resolve"]
            ca = ["/etc/containerd/certs.d/10.108.85.231:5000/ca.crt"]
          EOFHOSTS
          cp /ca/ca.crt /host/etc/containerd/certs.d/10.108.85.231:5000/ca.crt

          echo "CA certificate installed successfully"

          # Restart containerd service to pick up certificates (critical for DOKS)
          echo "Restarting containerd service..."
          if nsenter --target 1 --mount --uts --ipc --net --pid systemctl is-active containerd; then
            nsenter --target 1 --mount --uts --ipc --net --pid systemctl restart containerd || true
            sleep 5
            echo "Containerd restarted successfully"
          else
            echo "Containerd service not found or cannot restart"
          fi

          # Keep the container running to maintain the configuration
          while true; do
            sleep 3600
          done
        volumeMounts:
        - name: host-etc-docker
          mountPath: /host/etc/docker
        - name: host-etc-containerd
          mountPath: /host/etc/containerd
        - name: host-usr-share-ca
          mountPath: /host/usr/local/share/ca-certificates
        - name: registry-ca
          mountPath: /ca
          readOnly: true
        - name: host-root
          mountPath: /host
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: host-etc-docker
        hostPath:
          path: /etc/docker
          type: DirectoryOrCreate
      - name: host-etc-containerd
        hostPath:
          path: /etc/containerd
          type: DirectoryOrCreate
      - name: host-usr-share-ca
        hostPath:
          path: /usr/local/share/ca-certificates
          type: DirectoryOrCreate
      - name: host-root
        hostPath:
          path: /
          type: Directory
      - name: registry-ca
        configMap:
          name: registry-ca
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-ca-installer
  namespace: tesslate-registry
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: registry-ca-installer
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: registry-ca-installer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: registry-ca-installer
subjects:
- kind: ServiceAccount
  name: registry-ca-installer
  namespace: tesslate-registry