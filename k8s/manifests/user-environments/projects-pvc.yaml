# PersistentVolumeClaim for ALL User Development Environment Projects
#
# THIS IS THE ONLY STORAGE FOR USER PROJECT FILES
#
# Architecture:
# - Single shared PVC for all user development environments
# - Each user environment mounts a unique subPath: users/{user_id}/{project_id}
# - Mounted to /app in each user dev environment pod
# - Referenced by k8s_client.py:270 when creating user environment deployments
#
# IMPORTANT NOTES:
# - DigitalOcean block storage only supports ReadWriteOnce (RWO), not ReadWriteMany (RWX)
# - With RWO, all pods mounting this volume MUST be on the same node
# - Pod affinity is configured in k8s_client.py to ensure same-node scheduling
# - For production with multiple nodes, consider:
#   1. Using DigitalOcean Managed NFS for ReadWriteMany support
#   2. Using separate PVCs per user environment
#   3. Using object storage (S3/Spaces) for shared file access

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tesslate-projects-pvc
  namespace: tesslate-user-environments
  labels:
    app: tesslate
    component: user-storage
    tier: user-workloads
spec:
  # Use DigitalOcean's default block storage class
  storageClassName: do-block-storage

  # ReadWriteOnce - volume can be mounted read-write by pods on a single node
  # All user environment pods will need to be scheduled on the same node
  accessModes:
    - ReadWriteOnce

  resources:
    requests:
      storage: 10Gi  # Matches resource quota limit

  # No selector - let Kubernetes dynamically provision the volume